<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>
<chapter id="imagetransfer-software-publisher">  
  <info>
    <author>
      <firstname>Owen</firstname>
      <surname>Synge</surname>
    </author>
  </info>
  <title>imagetransfer Software Publishers</title>

   <section id="imagetransfer-software-imagelist-creation-deployment">
      <title>Deployment of Image Lists</title>
      <para>The security of a signed message with an expiry date is fine to ensure
  that a message is not faked. An old image can be presented to
  subscribers blocking seeing the new image list. This is very unlikely
  given HEP name server setups, but to have confidence this is not occurring
  we need an authenticated connection with the web server and that means SSL.</para>
      <para>It is an image list producers decision if they provide http, or https
  authenticated or even X509 authenticated access, Since this tool is based
  on X509 trust I would suggest deploying on an X509 based web server and
  not requiring client have an identify if possible, http(s) maybe enough
  security for many this is a discussion point.</para>
      <para>the client of the signed message from a web server we should know that it has 
      connected to the correct web server. I am bias to adding restrictions such as only 
      supporting X509 https to some web servers. What do people think?</para>
    </section>






<section id="imagetransfer-software-vmlipub">
  <title>hepixvmitrust</title>
  <section>
    <title>Introduction</title>
    <para>hepixvmitrust is a package that contains a CLI tool, and a minimal
implementation, in its documentation for X509 signing lists of
virtual machine image metadata. The tools are generally reusable
but were developed to satisfy the need to securely exchange virtual
machine images between High Energy Physics sites, in a similar way
to yum and apt repositories provide for rpms, this software provides
for Virtual Maschines.</para>
    <para>This software is available at:</para>
    <code>https://github.com/hepix-virtualisation/hepixvmitrust</code>
    <para>The software is production grade, and has been used by
    many members of the &vwg; to generate signed image lists.</para>
  </section>
  <section id="imagetransfer-software-imagelist-creation-status">
    <title>Status</title>

    <section id="imagetransfer-software-imagelist-creation-status-features">
      <title>Features</title>
      <itemizedlist>
        <listitem>Command line application with library to support integration.</listitem>
        <listitem>Adds X509 Signature to lists of images.</listitem>
        <listitem>Ability to add and remove images to image list.</listitem>
        <listitem>Automatic setting of some meta data fields.</listitem>
        <listitem>Supports optional data fields.</listitem>
        <listitem>Import signed image lists for modification.</listitem>
        <listitem>Set all fields via enviroment variables.</listitem>
      </itemizedlist>
    </section>
    <section id="imagetransfer-software-imagelist-creation-status-todo">
      <title>To Do (11-08-2011)</title>
      <itemizedlist>
        <listitem>Auto add CA and DN fields to image list.</listitem>
      </itemizedlist>
    </section>
  </section>






  <section>
    <title>Installation</title>
    
    
    <section id="imagetransfer-software-vmlipub-repo">
      <title>Package Repositories</title>
      <para>The intra site tools are tested on every release for &rhel; 5 and 6 and are developed 
        on the &debian; platform. They are available as src and binary RPM packages in the following 
        repository sporting.</para>
      <itemizedlist>
        <listitem>http://grid.desy.de/vm/repo/yum/sl6/noarch/RPMS.stable/</listitem>
        <listitem>http://grid.desy.de/vm/repo/yum/sl5/noarch/RPMS.stable/</listitem>
      </itemizedlist>
      <para>Deployment instructions are provided in the README included in the source code and 
        the RPM.</para>
    </section>
    
    
    <section>
      <title>Installation on Redhat Enterprise Linux 6</title>
      <para>Install EPEL for dependencies.</para>
      <programlisting>&prompt-root; <userinput>rpm -i http://download.fedora.redhat.com/pub/epel/6/x86_64/epel-release-6-5.noarch.rpm</userinput></programlisting>
      <para>Install DESY yum repository.</para>
      
      <programlisting>&prompt-root; <userinput>cat /etc/yum.repos.d/desyvirt.repo</userinput>
[desyvirt]
name=desyvirt
baseurl=http://grid.desy.de/vm/repo/yum/sl6/noarch/RPMS.stable/
enabled=1
gpgcheck=0</programlisting>
      <para>Install the Grid CA repository for details please see https://wiki.egi.eu/wiki/EGI_IGTF_Release</para>
      <programlisting>&prompt-root; <userinput>cat /etc/yum.repos.d/egi-trust-anchor.repo</userinput>
[EGI-trustanchors]
name=EGI-trustanchors
baseurl=http://repository.egi.eu/sw/production/cas/1/current/
gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3
gpgcheck=1
enabled=1</programlisting>
      <para>install the ca-policy-egi-core</para>
      <programlisting>&prompt-root; <userinput>yum install ca-policy-egi-core</userinput></programlisting>
      <para>install fetch-crl</para>
      <programlisting>&prompt-root; <userinput>yum install fetch-crl</userinput></programlisting>
      <para></para>
      <programlisting>&prompt-root; <userinput>yum install hepixvmitrust</userinput></programlisting>
    </section>
    <section>
      <title>Installation on Redhat Enterprise Linux 5</title>
      <para>Install EPEL for dependencies.</para>
      <programlisting>&prompt-root; <userinput>rpm -i http://download.fedora.redhat.com/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm</userinput></programlisting>
      <para>Install DESY yum repository.</para>
      <programlisting>&prompt-root; <userinput>cat /etc/yum.repos.d/desyvirt.repo</userinput>
[desyvirt]
name=desyvirt
baseurl=http://grid.desy.de/vm/repo/yum/sl5/noarch/RPMS.stable/
enabled=1
gpgcheck=0</programlisting>
      <para>Install the Grid CA repository for details please see
https://wiki.egi.eu/wiki/EGI_IGTF_Release</para>
      <programlisting>&prompt-root; <userinput>cat /etc/yum.repos.d/egi-trust-anchor.repo</userinput>
[EGI-trustanchors]
name=EGI-trustanchors
baseurl=http://repository.egi.eu/sw/production/cas/1/current/
gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3
gpgcheck=1
enabled=1</programlisting>
      <para>Install the lcg-CA</para>
      <programlisting>&prompt-root; <userinput>yum install lcg-CA</userinput></programlisting>
      <para>install fetch-crl</para>
      <programlisting>&prompt-root; <userinput>yum install fetch-crl</userinput></programlisting>
      <para>Install the hepix image list subscriber.</para>
      <programlisting>&prompt-root; <userinput>yum install hepixvmitrust</userinput></programlisting>
    </section>
    <section>
      <title>Installation on Debian </title>
      <para>Do not install thsi on debian 6.0 as the included version of python-m2crypto is not stable.</para>
      <para>All the dependacies are available in the debian repository.</para>
      <programlisting>&prompt-root; <userinput>aptitude install python-m2crypto</userinput></programlisting>
      <para>Now install the code froms git.</para>
      <programlisting>&prompt-root; <userinput>python setup.py install</userinput></programlisting>
    </section>
  </section>
  
  
  
  <section>
    <title>Basic usage vmilisttool</title>
    <para>To get a complete list of available commands do:</para>
    <programlisting>&prompt-user; <userinput>vmilisttool --help</userinput></programlisting>
    <para>Here is an example of how to create a signed image list:</para>
    <section>
      <title>Create a template for the image list.</title>
      
      <para></para>
      <programlisting>&prompt-user; <userinput>vmilisttool --json image_list_template.json</userinput></programlisting>
      <para>Edit the file image_list_template.json adding your list metadata so no 'null'
entries exist.</para>
      <programlisting>&prompt-user; <userinput>vim image_list_template.json</userinput></programlisting>
    </section>
    <section>
      <title>Create a template for an image reference.</title>
      
      <para>Create a template for an image reference. This will compute the checksum of
the image file and create a JSON text file containing that checksum.</para>
      <programlisting>&prompt-user; <userinput>vmilisttool --image /home/jdoe/rawdiskimage.img --generate VMmetadata.json</userinput></programlisting>
      <para>Edit the file VMmetadata.json adding your list metadata so no 'null' entries exist.</para>
      <programlisting>&prompt-user; <userinput>vim  VMmetadata.json</userinput></programlisting>
    </section>
    <section>
      <title>Add image metadata to the image list</title>
      
      <para>Add your newly updated image metadata to the image list</para>
      <programlisting>&prompt-user; <userinput>vmilisttool  --template image_list_template.json  -add VMmetadata.json --json merged_image_list.json</userinput></programlisting>
    </section>
    <section>
      <title>Sign the image list.</title>
      
      <para>Sign the now assembled metadata list.</para>
      <programlisting>&prompt-user; <userinput>vmilisttool  --template merged_image_list.json -s signed_image_list</userinput></programlisting>
    </section>
  </section>
  <section>
    <title>How to verify and image</title>
    <para>To get the DN and CA of your signature.</para>
    <programlisting>&prompt-user; <userinput>openssl smime -in your_signed.msg \
     -pk7out | openssl pkcs7 -print_certs</userinput></programlisting>
    <para>To Verfy the message agaisnt the CA certificate.</para>
    <programlisting>&prompt-user; <userinput>openssl smime -in your_signed.msg \
     -CAfile /etc/grid-security/certificates/dd4b34ea.0 \
     -verify 1> /dev/null</userinput></programlisting>
  </section>
  <section>
    <title>Environment variables</title>
    <para>Environment variables can be used to set defaults for variables that must be added to the
JSON directly if not set.</para>
    <para>Three groups of environment variables exist, Image list level,
Endorser level and Image level. These three groups have unique prefixs.</para>
    <section>
      <title>Image list level</title>
      <itemizedlist>
        <listitem>HVMIL_DC_DATE_CREATED</listitem>
        <listitem>HVMIL_DC_DATE_EXPIRES</listitem>
        <listitem>HVMIL_DC_DESCRIPTION</listitem>
        <listitem>HVMIL_DC_IDENTIFIER</listitem>
        <listitem>HVMIL_DC_SOURCE</listitem>
        <listitem>HVMIL_DC_TITLE</listitem>
        <listitem>HVMIL_HV_URI</listitem>
        <listitem>HVMIL_HV_VERSION</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Image level</title>
      <itemizedlist>
        <listitem>HVMILI_DC_DESCRIPTION</listitem>
        <listitem>HVMILI_DC_IDENTIFIER</listitem>
        <listitem>HVMILI_DC_TITLE</listitem>
        <listitem>HVMILI_HV_HYPERVISOR</listitem>
        <listitem>HVMILI_HV_SIZE</listitem>
        <listitem>HVMILI_HV_URI</listitem>
        <listitem>HVMILI_HV_VERSION</listitem>
        <listitem>HVMILI_SL_ARCH</listitem>
        <listitem>HVMILI_SL_CHECKSUM_SHA512</listitem>
        <listitem>HVMILI_SL_COMMENTS</listitem>
        <listitem>HVMILI_SL_OS</listitem>
        <listitem>HVMILI_SL_OSVERSION</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Endorser Level</title>
      <itemizedlist>
        <listitem>HVMILE_DC_CREATOR</listitem>
        <listitem>HVMILE_HV_CA</listitem>
        <listitem>HVMILE_HV_DN</listitem>
        <listitem>HVMILE_HV_EMAIL</listitem>
      </itemizedlist>
    </section>
  </section>
</section>
<section id="imagetransfer-software-imagelist-creation-developer">
    <title>For developers - minimal.py</title>
    <para>This is an alternative implantation of an image list signer in python,
    using the m2crypto wrapper for openssl as does the CLI.</para>
    <para>This version is very compact and simplistic.</para>
    <para>It is intended for products like repoman, VMIC and Petrags release
    system, to see an example of signing thier own image lists, using
    minimal code.</para>
    <para>The image list should be placed on a web server.</para>
</section>
</chapter>
