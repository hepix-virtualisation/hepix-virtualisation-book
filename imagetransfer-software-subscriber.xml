<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>

<section id="imagetransfer-software-vmlisub">
  <title>vmlisub</title>
  <para>This virtual maschine image list subscriber implementation is intended to be a production grade referance implementation.</para>
  <section>
    <title>Introduction</title>
    <para>This application allows users to subscribe to virtual machine image lists, cache
the images referenced to in the image list, validate the images list with x509 
based public key cryptography, and validate the images against sha512 hashes in 
the images lists and provide events for further applications to process updates 
or expiries of virtual machine images without having to further validate the 
images. This set of applications are designed to provide a similar work flow
from each area of control to the imagelist archive.</para>
    <itemizedlist>
      <listitem>vmlisub_endorser - Endorsers of imagelist subscriptions.</listitem>
      <listitem>vmlisub_sub      - Subscription list details.</listitem>
      <listitem>vmlisub_image    - Image details.</listitem>
      <listitem>vmlisub_cache    - Cache images and update events.</listitem>
    </itemizedlist>
    <para>They work in conjunction with a database to ease navigation, a local cache of
image list subscriptions. The database is message format agnostic, but it
authenticates and validates all messages in import. Because these are just
caches of imagelists they are meant to be used the majority of the time without
intervention.</para>
    <para>If you are signing a list using the hepix image list signer, you should also
install this application and subscribe to your current image.</para>
    <para>It is intended to with a couple of cron scripts to be informed at any time if
your local images are matching signatures in the image list.</para>
    <para>Anyone curious about this application should consider this application a
software application similar to Debian's 'aptitude' or Redhats 'yum', but rather
for virtual machines, authenticated by the x509 signatures.</para>
  </section>
  <section>
    <title>Installation</title>
    <section>
      <title>Installation on Redhat Enterprise Linux 6</title>
      <para>Install EPEL for dependencies.</para>
      <programlisting>&prompt-root; rpm -i http://download.fedora.redhat.com/pub/epel/6/x86_64/epel-release-6-5.noarch.rpm</programlisting>
      <para>Install DESY yum repository.</para>
      
      <programlisting>&prompt-root; cat /etc/yum.repos.d/desyvirt.repo
[desyvirt]
name=desyvirt
baseurl=http://grid.desy.de/vm/repo/yum/sl6/noarch/RPMS.stable/
enabled=1
gpgcheck=0</programlisting>
      <para>Install the Grid CA repository for details please see https://wiki.egi.eu/wiki/EGI_IGTF_Release</para>
      <programlisting>&prompt-root; cat /etc/yum.repos.d/egi-trust-anchor.repo
[EGI-trustanchors]
name=EGI-trustanchors
baseurl=http://repository.egi.eu/sw/production/cas/1/current/
gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3
gpgcheck=1
enabled=1</programlisting>
      <para>install the ca-policy-egi-core</para>
      <programlisting>&prompt-root; yum install ca-policy-egi-core</programlisting>
      <para>install fetch-crl</para>
      <programlisting>&prompt-root; yum install fetch-crl</programlisting>
      <para></para>
      <programlisting>&prompt-root; yum install hepixvmilsubscriber</programlisting>
    </section>
    <section>
      <title>Installation on Redhat Enterprise Linux 5</title>
      <para>Install EPEL for dependencies.</para>
      <programlisting>&prompt-root; rpm -i http://download.fedora.redhat.com/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm</programlisting>
      <para>Install DESY yum repository.</para>
      <programlisting>&prompt-root; cat /etc/yum.repos.d/desyvirt.repo
[desyvirt]
name=desyvirt
baseurl=http://grid.desy.de/vm/repo/yum/sl5/noarch/RPMS.stable/
enabled=1
gpgcheck=0</programlisting>
      <para>Install the Grid CA repository for details please see
https://wiki.egi.eu/wiki/EGI_IGTF_Release</para>
      <programlisting>&prompt-root; cat /etc/yum.repos.d/egi-trust-anchor.repo
[EGI-trustanchors]
name=EGI-trustanchors
baseurl=http://repository.egi.eu/sw/production/cas/1/current/
gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3
gpgcheck=1
enabled=1</programlisting>
      <para>Install the lcg-CA</para>
      <programlisting>&prompt-root; yum install lcg-CA</programlisting>
      <para>install fetch-crl</para>
      <programlisting>&prompt-root; yum install fetch-crl</programlisting>
      <para>Install the hepix image list subscriber.</para>
      <programlisting>&prompt-root; yum install hepixvmilsubscriber</programlisting>
      <para>This may fail due to a dependency of m2crypto that cannot be satisfied. This is
due to known bugs in m2crypto in the version shipped in RHEL5. If this is a
problem please download the following</para>
      <programlisting>&prompt-root; http://ftp.informatik.uni-frankfurt.de/fedora-archive/fedora/linux/releases/8/Everything/source/SRPMS/m2crypto-0.18-2.src.rpm</programlisting>
      <para>And build a native RPM.</para>
    </section>
  </section>
  <section>
    <title>vmlisub_endorser</title>
    <para>This application is for managing who the subscriber trusts to update image 
lists. Since individuals are identified with x509 certificates, Each certificate
has an issuing certificate and a unique string called a 'subject' to identify 
the certificate. The 'subject' of a certificate and the 'subject' of the issuing 
certificate combined are called 'credentials', and will be globally unique.</para>
    <para>ndividuals on rare occasions will need more than one certificate, for this 
reason they are given a unique identifier under this system and allowed to 
have more than one set of credentials. </para>
    <para>Adding a individual to the vmli database.</para>
        <programlisting>&prompt-user;  vmlisub_endorser --create \
       --endorser_uuid=63175437-7d59-4851-b333-c96cb6545a86 \
       --subject='/C=CA/O=Grid/OU=phys.uvic.ca/CN=Ian Gable' \
       --issuer='/C=CA/O=Grid/CN=Grid Canada Certificate Authority'  </programlisting>
    <para>Deleting and individual from a vmli database.</para>
    <programlisting>&prompt-user;  vmlisub_endorser --delete \
       --endorser_uuid=63175437-7d59-4851-b333-c96cb6545a86</programlisting>
    <para>Allowing an individual to update a subscription.</para>
    <programlisting>&prompt-user;  vmlisub_endorser --link \
       --endorser_uuid=63175437-7d59-4851-b333-c96cb6545a86 \
       --subscription_uuid=e55c1afe-0a62-4d31-a8d7-fb8c825f92a2</programlisting>
    <para>Removing an individuals right to update a subscription.</para>
    <programlisting>&prompt-user;  vmlisub_endorser --unlink \
       --endorser_uuid=63175437-7d59-4851-b333-c96cb6545a86 \
       --subscription_uuid=e55c1afe-0a62-4d31-a8d7-fb8c825f92a2</programlisting>
    <para>Each endorser_uuid must be unique or they will be assumed to be the same item. 
The endorser_uuid could be a more human name:</para>
    <programlisting>&prompt-user;  vmlisub_endorser --create \
       --endorser_uuid='Ian Gable' \
       --subject='/C=CA/O=Grid/OU=phys.uvic.ca/CN=Ian Gable' \
       --issuer='/C=CA/O=Grid/CN=Grid Canada Certificate Authority'</programlisting>
  </section>
  <section>
    <title>vmlisub_sub</title>    
    <para>This application manages your subscriptions and thier update:</para>
    <para>To add a subscription</para>
    <programlisting>&prompt-user;  vmlisub_sub  -s https://particle.phys.uvic.ca/~igable/hepix/hepix_signed_image_list</programlisting>
    <para>Or alternatively you can download a file visually insepect it and subscribe to the local file.</para>
    <programlisting>&prompt-user;  vmlisub_sub  -s file:////`pwd`/hepix_signed_image_list</programlisting>
    <para>To update your subscriptions</para>
    <programlisting>&prompt-user;  vmlisub_sub  -U</programlisting>
    <para>To list subscriptions</para>
    <programlisting>&prompt-user;  vmlisub_sub  -l
63175437-7d59-4851-b333-c96cb6545a86    True    https://particle.phys.uvic.ca/~igable/hepix/hepix_signed_image_list</programlisting>
    <para>Getting Information on a subscription:</para>
    <programlisting>&prompt-user;  vmlisub_sub  -i --uuid=63175437-7d59-4851-b333-c96cb6545a86
dc:identifier=63175437-7d59-4851-b333-c96cb6545a86
subscription.dc:description=HEPiX Image Exchange Testing
subscription.sl:authorised=True
subscription.hv:uri=https://particle.phys.uvic.ca/~igable/hepix/hepix_signed_image_list
subscription.dc:date:updated=2011-04-16T19:23:19Z
imagelist.dc:date:imported=2011-04-16T19:23:18Z
imagelist.dc:date:created=2011-03-16T00:15:07Z
imagelist.dc:date:expires=2011-04-13T00:15:07Z</programlisting>
    <para>you can also select on the basis of url:</para>
    <programlisting>&prompt-user;  vmlisub_sub  -i -r https://particle.phys.uvic.ca/~igable/hepix/hepix_signed_image_list
dc:identifier=63175437-7d59-4851-b333-c96cb6545a86
subscription.dc:description=HEPiX Image Exchange Testing
subscription.sl:authorised=True
subscription.hv:uri=https://particle.phys.uvic.ca/~igable/hepix/hepix_signed_image_list
subscription.dc:date:updated=2011-04-17T19:04:35Z
imagelist.dc:date:imported=2011-04-17T19:04:34Z
imagelist.dc:date:created=2011-03-16T00:15:07Z
imagelist.dc:date:expires=2011-04-13T00:15:07Z</programlisting>
    <para>Change the output format to get the original message without the security wraper, or in original form:</para>
    <programlisting>&prompt-user;  vmlisub_sub  -i --uuid=63175437-7d59-4851-b333-c96cb6545a86 -f message</programlisting>
    <para>Three formats exist SMIME, message, lines. </para>
    <itemizedlist>
      <listitem>SMIME for applications that wish to process the signature as if from the endorser directly.</listitem>
      <listitem>message for applications that have no interest in processing the SMIME signature.</listitem>
      <listitem>lines for human users of this application.</listitem>
    </itemizedlist>
    
    <para>To delete a subscription</para>
    <programlisting>&prompt-user;  vmlisub_sub  -D  --uuid=63175437-7d59-4851-b333-c96cb6545a86</programlisting>
  </section>
  <section>
    <title> vmlisub_image</title>
    <para> This application manages images within your subscription. </para> 
    <para>List the available images</para>
    <programlisting>&prompt-user;  vmlisub_image -l
327016b0-6508-41d2-bce0-c1724cb3d3e2    2       63175437-7d59-4851-b333-c96cb6545a86
ecfbc671-eaee-439c-b1a3-db85dbef5e7b    3       63175437-7d59-4851-b333-c96cb6545a86
da42ca85-179b-4873-b12e-32d549bf02b6    2       63175437-7d59-4851-b333-c96cb6545a86</programlisting>
    <para>The results show the UUID of the image, the availability state and the
subscription UUID. The state value is a bitmap, 1 is subscribed, 2 means its
available in the current image lists. Now we will select an image for local caching.</para>
    <section>
      <title>Selecting Images</title>
      <para>Images can be selected by either UUID or Sha512 hash. This allows explicit
  selection of images or by the sha512 from an old image.</para>
      <para>Delete the subscription by image.</para>
      <programlisting>&prompt-user;  vmlisub_image -D -u 327016b0-6508-41d2-bce0-c1724cb3d3e2</programlisting>
      <para>Subscribe to an image.</para>
      <programlisting>&prompt-user;  vmlisub_image -a -u 327016b0-6508-41d2-bce0-c1724cb3d3e2</programlisting>
      <para>Unsubscribe an image</para>
      <programlisting>&prompt-user;  vmlisub_image -r -u 327016b0-6508-41d2-bce0-c1724cb3d3e2</programlisting>
    </section>
  </section>
  <section>
    <title>vmlisub_cache  </title>
    <para>  This application downloads images. By default it will download images, check the sha512
hash of cached images and expire images from old image lists.</para>
    <programlisting>&prompt-user;  vmlisub_cache
INFO:vmlisub_sub.main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
INFO:vmlisub_sub.main:Defaulting actions as 'expire', 'sha512' and 'download'.
INFO:vmlisub_sub.main:Defaulting cache-dir to 'cache'.
INFO:vmlisub_sub.main:Defaulting partial-dir to 'cache/partial'.
INFO:vmlisub_sub.main:Defaulting expired-dir to 'cache/expired'.
INFO:DownloadDir:Downloading 'ecfbc671-eaee-439c-b1a3-db85dbef5e7b'.
INFO:CacheMan:moved file ecfbc671-eaee-439c-b1a3-db85dbef5e7b
</programlisting>
    <section>
      <title>vmlisub_cache Event interface</title>
      <para>Since this application suite is intended to be embedded in a larger application 
and concerned with downloading and managing updates of VM images into a cloud
infrastructure, it is some times beneficial to have an event interface so that 
applicatyions may embed these applications in larger systems.</para>
      <programlisting>&prompt-user;  vmlisub_cache -x "/usr/bin/VmImageUpdateProcessor \$VMILS_EVENT_TYPE"</programlisting>
      <para>The events interface launches a shell with a series of environment variables. The
event must process its command within 10 seconds or else it will be sent a 
termination signal. See the following example:</para>
      <programlisting>vmlisub_cache -x 'env  ; exit 1'</programlisting>
      <para>All Events have a type. This is given to the event handler by setting the 
variable, VMILS_EVENT_TYPE with the following values "AvailablePrefix", 
"AvailablePostfix", "ExpirePrefix" and "ExpirePosfix".</para>
      <para>"Available" events happen when a new image is validated, while "Expire" events 
occur when an image i no longer the validated image. The "Prefix" events occur 
before the file changes state, and the "Posfix" events occur after the state 
change.</para>
      <para>The following environment variables may be set by events:</para>
      <itemizedlist>
        <listitem>VMILS_EVENT_TYPE</listitem>
        <listitem>VMILS_EVENT_DC_DESCRIPTION</listitem>
        <listitem>VMILS_EVENT_DC_IDENTIFIER</listitem>
        <listitem>VMILS_EVENT_DC_TITLE</listitem>
        <listitem>VMILS_EVENT_HV_HYPERVISOR</listitem>
        <listitem>VMILS_EVENT_HV_SIZE</listitem>
        <listitem>VMILS_EVENT_HV_URI</listitem>
        <listitem>VMILS_EVENT_SL_ARCH</listitem>
        <listitem>VMILS_EVENT_SL_CHECKSUM_SHA512</listitem>
        <listitem>VMILS_EVENT_SL_COMMENTS</listitem>
        <listitem>VMILS_EVENT_SL_OS</listitem>
        <listitem>VMILS_EVENT_SL_OSVERSION</listitem>
        <listitem>VMILS_EVENT_TYPE</listitem>
        <listitem>VMILS_EVENT_FILENAME</listitem>
      </itemizedlist>
      <para>These correspond to the variables within the image list.</para>
      <section>
        <title>vmlisub_cache Event Environment variables</title>
        <section>
          <title>VMILS_EVENT_TYPE</title>
          <itemizedlist>
            <listitem>AvailablePrefix<para>An image will be available soon as it is being attempted to be retrieved.</para></listitem>
            <listitem>AvailablePostfix<para>An image was successfully validated as being available and placed in the cache 
directory.</para></listitem>
            <listitem>ExpirePrefix<para>This image is will no longer be available in the cache directory.</para></listitem>
            <listitem>ExpirePosfix<para>This image is no longer in the cache directory.</para></listitem>
          </itemizedlist>
        </section>
        <section>
          <title>VMILS_EVENT_DC_DESCRIPTION</title>
          <para>The description text in the image.</para>
        </section>
        <section>
          <title>VMILS_EVENT_DC_IDENTIFIER</title>
          <para>Unique identifier of the image. Its suggested that image producers use RFC 4122 
UUID for imagelist this allows updating the list, and uniqueness.</para>
        </section>
        <section>
          <title>VMILS_EVENT_DC_TITLE</title>
          <para>Image Title.</para>
        </section>
        <section>
          <title>VMILS_EVENT_HV_HYPERVISOR</title>
          <para>Typically set to reflect the Virtualization technology values such as "xen", "kvm".</para>
        </section>
        <section>
          <title>VMILS_EVENT_HV_SIZE</title>
          <para>The Image Size</para>
        </section>
        <section>
          <title>VMILS_EVENT_HV_URI</title>
          <para>The Original URI for the image</para>
        </section>
        <section>
          <title>VMILS_EVENT_SL_ARCH</title>
          <para>The images architecture.</para>
        </section>
        <section>
          <title>VMILS_EVENT_SL_CHECKSUM_SHA512</title>
          <para>The Images sha512 checksum.</para>
        </section>
        <section>
          <title>VMILS_EVENT_SL_COMMENTS</title>
          <para>Comments added by the image author</para>
        </section>
        <section>
          <title>VMILS_EVENT_SL_OS</title>
          <para>The Operating System the VM image contains</para>
        </section>
        <section>
          <title>VMILS_EVENT_SL_OSVERSION</title>
          <para>The Operating System version</para>
        </section>
        <section>
          <title>VMILS_EVENT_FILENAME</title>
          <para>The Image file name.</para>
        </section>
      </section>
    </section>
  </section>
  <section>
    <title>Quick start use of hepixvmilsubscriber</title>
    <para>First make sure that all the Certificate Revocation Lists (CRL) are upto date.</para>
    <programlisting>&prompt-root;  fetch-crl</programlisting>
    <para>To add a subscription,</para>
    <programlisting>&prompt-user;  wget --no-check-certificate https://particle.phys.uvic.ca/~igable/hepix/hepix_signed_image_list</programlisting>
    <para>Now you can check the image list by visiual inspection.</para>
    <programlisting>&prompt-user;  grep 'hv:[cd][an]' hepix_signed_image_list
                "hv:ca": "/C=CA/O=Grid/CN=Grid Canada Certificate Authority", 
                "hv:dn": "/C=CA/O=Grid/OU=phys.uvic.ca/CN=Ian Gable", </programlisting>
    <para>Now create this endorser. The endorser_uuid can be any string but its recommended this is a 
short string possibly following the uuid standard:</para>
    <programlisting>&prompt-user;  vmlisub_endorser --create \
       --endorser_uuid='Ian' \
       --subject='/C=CA/O=Grid/OU=phys.uvic.ca/CN=Ian Gable' \
       --issuer='/C=CA/O=Grid/CN=Grid Canada Certificate Authority'</programlisting>
    <para>Now we can add the subscription, this will automatically link the endorser 
with this subscription.</para>
    <programlisting>&prompt-user;  vmlisub_endorser -l
Ian    '/C=CA/O=Grid/OU=phys.uvic.ca/CN=Ian Gable'        '/C=CA/O=Grid/CN=Grid Canada Certificate Authority'</programlisting>
    <para>The above command will show you the endorsers. Note the first column is the 
identifier. In this case its shorter than a UUID. The second column is the 
users certificate subject (some times know as distinguished name) while the 
third column is the subject of the issuing certificate authority.</para>
    <programlisting>&prompt-user;  vmlisub_sub -s file:////`pwd`/hepix_signed_image_list
INFO:main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
WARNING:db_actions:list hv:uri does not match subscription uri</programlisting>
    <para>Although less secure it is also possible to add the option '--auto-endorse'
to the command line so that the users, and issuer's certificates are auto added
to the database when subscribing.</para>
    <programlisting>&prompt-user;  vmlisub_sub  --auto-endorse -s file:////`pwd`/hepix_signed_image_list
INFO:main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
WARNING:db_actions:list hv:uri does not match subscription uri</programlisting>
    <para>List the registered Images.</para>
    <programlisting>&prompt-user;  vmlisub_image -l
INFO:vmlisub_sub.main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
327016b0-6508-41d2-bce0-c1724cb3d3e2    0       63175437-7d59-4851-b333-c96cb6545a86
ecfbc671-eaee-439c-b1a3-db85dbef5e7b    0       63175437-7d59-4851-b333-c96cb6545a86
da42ca85-179b-4873-b12e-32d549bf02b6    0       63175437-7d59-4851-b333-c96cb6545a86</programlisting>
    <para>The results show the UUID of the image, the availability state and the
subscription UUID. The state value is a bitmap, 1 is subscribed, 2 means its
available in the current image lists. Now we will select an image for local caching.</para>
    <para>Next update the subscriptions.</para>
    <programlisting>&prompt-user;  vmlisub_sub -U
INFO:main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
INFO:db_actions:Updating:63175437-7d59-4851-b333-c96cb6545a86</programlisting>
    <para>Now the data base contains the latest version of the image list. To query the
available images they can be cached:</para>
    <programlisting>&prompt-user;  vmlisub_image -l
INFO:vmlisub_sub.main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
327016b0-6508-41d2-bce0-c1724cb3d3e2    2       63175437-7d59-4851-b333-c96cb6545a86
ecfbc671-eaee-439c-b1a3-db85dbef5e7b    2       63175437-7d59-4851-b333-c96cb6545a86
da42ca85-179b-4873-b12e-32d549bf02b6    2       63175437-7d59-4851-b333-c96cb6545a86</programlisting>
    <para>Thsi now shows the images are available in the latest image list.</para>
    <programlisting>&prompt-user;  vmlisub_image -a -u ecfbc671-eaee-439c-b1a3-db85dbef5e7b
INFO:vmlisub_sub.main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'</programlisting>
    <para>The image list state is now changed to</para>
    <programlisting>&prompt-user;  vmlisub_image -l
INFO:vmlisub_sub.main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
327016b0-6508-41d2-bce0-c1724cb3d3e2    2       63175437-7d59-4851-b333-c96cb6545a86
ecfbc671-eaee-439c-b1a3-db85dbef5e7b    3       63175437-7d59-4851-b333-c96cb6545a86
da42ca85-179b-4873-b12e-32d549bf02b6    2       63175437-7d59-4851-b333-c96cb6545a86</programlisting>
    <para>Clearly showing that the image 'ecfbc671-eaee-439c-b1a3-db85dbef5e7b' is subscribed.</para>
    <para>Make the directories for caching the images.</para>
    <programlisting>&prompt-user;  mkdir cache cache/partial cache/expired</programlisting>
    <para>Now cache the images.</para>
    <programlisting>&prompt-user;  vmlisub_cache
INFO:vmlisub_sub.main:Defaulting DB connection to 'sqlite:///vmilsubscriber.db'
INFO:DownloadDir:Downloading 'ecfbc671-eaee-439c-b1a3-db85dbef5e7b'.
INFO:CacheMan:moved file ecfbc671-eaee-439c-b1a3-db85dbef5e7b</programlisting>
    <para>Once this is complete the image from the image list will be cached.</para>
    <programlisting>&prompt-user;  find cache/
cache/
cache/partial
cache/partial/cache.index
cache/expired
cache/expired/cache.index
cache/ecfbc671-eaee-439c-b1a3-db85dbef5e7b
cache/cache.index</programlisting>
    <section>
      <title>Set up for Production using Cron</title>
      <para>Then the by hand configuration for your master DB</para>
      <programlisting>&prompt-root;  useradd vmlisub</programlisting>
      <programlisting>&prompt-root;  mkdir -p /var/lib/vmlisub /var/cache/vmimages/endorsed \
      /var/cache/vmimages/partial /var/cache/vmimages/expired</programlisting>
      <programlisting>&prompt-root;  touch /var/log/vmlisub.log</programlisting>
      <programlisting>&prompt-root;  chown vmlisub:vmlisub /var/lib/vmlisub  /var/cache/vmimages/endorsed \
      /var/cache/vmimages/partial /var/cache/vmimages/expired \
      /var/log/vmlisub.log</programlisting>
      <programlisting>&prompt-root;  sudo -u vmlisub /usr/bin/vmlisub_sub \
      -s https://particle.phys.uvic.ca/~igable/hepix/hepix_signed_image_list \
      -d sqlite:////var/lib/vmlisub/vmlisub.db</programlisting>
      <para>make a cron job</para>
      <programlisting>&prompt-root;  cat   /etc/cron.d/vmlisub
50 */6 * * *    vmlisub (/usr/bin/vmlisub_sub -d sqlite:////var/lib/vmlisub/vmlisub.db -U; /usr/bin/vmlisub_cache -d sqlite:////var/lib/vmlisub/vmlisub.db -C /var/cache/vmimages/endorsed/ -p /var/cache/vmimages/partial/ -e /var/cache/vmimages/expired/ ) >> /var/log/vmlisub.log 2>&amp;1</programlisting>      
    <para>So the script is executed every 6 hours shortly after fetch CRL.</para>
    <para>Now at any time users with file permisions can get a list of valid images.</para>
      <programlisting>&prompt-user;  vmlisub_image -l -d sqlite:////var/lib/vmlisub/vmlisub.db</programlisting>
    </section>
  </section>
  <section>
    <title>Logging configuration</title>
    <para>All scripts have a logging option. This is used to configure pythons logging 
      library. An example is shown below.</para>
    <programlisting>&prompt-user;  vmlisub_image -L /usr/share/doc/hepixvmilsubscriber/logger.conf -l</programlisting>

    <para>Logging can be independently set up for each object to multiple locations, and 
      with different log levels.</para>
  </section>
  <section>
    <title>Environment Variables</title>
    <para>Environment variables can be used to set default values but the command line 
options will override any set environment options.</para>
    <section>
      <title>VMILS_RDBMS </title>
      <para>Sets the path to the database. For example "sqlite:///vmilsubscriber.db"</para>
    </section>
    <section>
      <title>VMILS_CACHE_EVENT</title>
      <para>Sets the executions string. Command line options can be set as enviroment 
variables just like the command line interface. Users of the "sh shell" must
protect the envroment variables from being substituted by thier shell.</para>
      <programlisting>&prompt-user;  export VMILS_CACHE_EVENT="./myEventProcessor \$VMILS_EVENT_TYPE"</programlisting>
      <para>An example of how to execute a command with an action command line.</para>
    </section>
    <section>
      <title>VMILS_LOG_CONF</title>
      <para>Sets the path to the logging configuration file.</para>
    </section>
    <section>
      <title>VMILS_DIR_CERT</title>
      <para>Sets the Path to the certificate authorities public keys, certificate revocation
lists and certificate name spaces.</para>
    </section>
    <section>
      <title>VMILS_CACHE_DIR_CACHE</title>
      <para>Path used by 'vmlisub_endorser' to store verified VM images.</para>
    </section>
    <section>
      <title>VMILS_CACHE_DIR_DOWNLOAD</title>
      <para>Path used by 'vmlisub_endorser' to download VM images before VM image integrity
is checked.</para>
    </section>
    <section>
      <title>VMILS_CACHE_DIR_EXPIRE</title>
      <para>Path used by 'vmlisub_endorser' to store VM images when they are no longer 
endorsed.</para>
    </section>
    <section>
      <title>VMILS_CACHE_ACTION_DOWNLOAD</title>
      <para>Instructs 'vmlisub_endorser' to download the latest VM images and check 
integrity.</para>
    </section>
    <section>
      <title>VMILS_CACHE_ACTION_CHECK</title>
      <para>Instructs 'vmlisub_endorser' check integrity for all currently stored VM images.</para>
    </section>
    <section>
      <title>VMILS_CACHE_ACTION_EXPIRE</title>
      <para>Instructs 'vmlisub_endorser' to expire stored VM images that are no longer 
endorsed.</para>
    </section>
  </section>
</section>
